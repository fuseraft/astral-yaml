import "@kiwi/string"
import "@text/stream"

package yaml
  __home__("text")

  class YamlParser
    def initialize() end
    
    def parse(content)
      tokens = YamlLexer.tokenize(content)
      s = Stream.new(tokens)
      yml = {}
      yml.line_no = 1
      yml.indent_level = 0
      yml.stack = [{}]

      while true do
        break when !s.can_read()
        parse_token(yml, s)
      end
    end

    def parse_token(yml, s)
      t = s.read()
      if t.type == "SPACE"
        parse_indentation(yml, t)
      elsif t.type == "LF"
        parse_linefeed(yml, t)
      elsif t.type != "COMMENT"
        println "${yml.line_no}: ${yml.indent_level}: ${t.type}: `${t.text}`"
      end
    end

    def parse_literal(yml, t, s)
      if s.peek().type == "COLON"
        s.read() # skip ":"
        key = t.text
        value_token = s.read()
      end
    end

    def parse_indentation(yml, t)
      prev_indent_level = yml.indent_level
      yml.indent_level = t.text.size() + 1

      if prev_indent_level < yml.indent_level
        yml.stack.push({})
      end
    end

    def parse_linefeed(yml, t)
      current_line_no = yml.line_no
      yml.line_no = current_line_no + 1
      yml.indent_level = 0

      if !yml.stack.empty()
        current_object = yml.stack.pop()
        yml = yml.merge(current_object)
      end
    end
  end

  class YamlLexer
    static def tokenize(content)
      s = Stream.new(content.chars())
      tokens = []
      
      while true do
        break when !s.can_read()          
        tokens << yaml::parse_token(s)
      end

      return tokens
    end
  end

  fn token(type, text = "")
    return { "type": type, "text": text }
  end

  fn skip_ws(s)
    if s.peek() == " "
      s.read() # Skip the " "    
    end
  end
  
  fn parse_quoted(s, initial_char)
    builder = ""
    c = ""
  
    while c != initial_char do
      break when s.peek() == "\n"
      builder += c
      c = s.read()
    end
  
    return yaml::token("QUOTED", builder)
  end
  
  fn parse_space(s, initial_char)
    builder = ""
    c = initial_char
  
    while c == " " do
      break when s.peek() != " "
      builder += c
      c = s.read()
    end
  
    return yaml::token("SPACE", builder)
  end
  
  fn parse_letters(s, initial_char)
    builder = initial_char
    c = ""
  
    while true do
      break when s.peek() == "\n"
  
      peek_n = s.peekn(3)
      if peek_n.ends_with(": ") || peek_n.ends_with(":\n")
        return yaml::token("LITERAL", builder)
      end
  
      c = s.read()
      builder += c
    end
  
    return yaml::token("LITERAL", builder)
  end
  
  fn parse_digits(s, initial_char)
    builder = initial_char
    c = ""
  
    while true do    
      if s.peek() == "\n"
        builder += c
        break
      end
      
      builder += c
      c = s.read()
    end
  
    return yaml::token("NUMERIC_LITERAL", builder)
  end
  
  fn parse_colon(s)
    yaml::skip_ws(s)
    return yaml::token("COLON", ":")
  end
  
  fn parse_dash(s)
    yaml::skip_ws(s)
    return yaml::token("DASH", "-")
  end
  
  fn parse_comment(s)
    builder = ""
    c = ""
  
    while true do    
      break when s.peek() == "\n"
      builder += c
      c = s.read()
    end
  
    return yaml::token("COMMENT", builder)
  end
  
  fn parse_alphanumeric(s, c)
    return yaml::parse_quoted(s, c)        when "\"'".contains(c)
    return yaml::parse_space(s, c)         when c == " "
    return yaml::parse_dash(s)             when c == "-"
    return yaml::parse_colon(s)            when c == ":"
    return yaml::parse_comment(s)          when c == "#"
    return yaml::token("COMMA", c)         when c == ","
    return yaml::token("OPEN_BRACKET", c)  when c == "["
    return yaml::token("CLOSE_BRACKET", c) when c == "]"
    return yaml::token("OPEN_BRACE", c)    when c == "{"
    return yaml::token("CLOSE_BRACE", c)   when c == "}"
    return yaml::token("OPEN_PAREN", c)    when c == "("
    return yaml::token("CLOSE_PAREN", c)   when c == ")"
    return yaml::token("LF", c)            when c == "\n"
    return yaml::token("TAB", c)           when c == "\t"
    return yaml::token("OTHER", c)
  end
  
  fn parse_token(s)
    c = s.read()
    return yaml::parse_digits(s, c)        when string::isnumeric(c)
    return yaml::parse_letters(s, c)       when string::isalpha(c) || c == "_"
    return yaml::parse_alphanumeric(s, c)  when !string::isalphanumeric(c)
    return yaml::token("OTHER", c)
  end
end
